O(1)：常数时间复杂度，表示算法的执行时间不随输入规模的增加而增加。

O(log n)：对数时间复杂度，通常是指以 2 为底的对数。常见的例子是二分查找算法。

O(n)：线性时间复杂度，表示算法的执行时间与输入规模成正比。例如，一次遍历数组的算法。

O(n log n)：线性对数时间复杂度，通常出现在一些高效的排序算法中，如快速排序和归并排序。

O(n^2)：平方时间复杂度，通常出现在一些简单的排序算法（如冒泡排序、插入排序）中，以及某些不够高效的算法中。

O(n^k)，其中 k 是大于 2 的常数：多项式时间复杂度，常见于一些更复杂的算法，如矩阵乘法算法。

O(2^n)：指数时间复杂度，通常出现在某些指数型算法中，如递归的穷举算法。

O(n!)：阶乘时间复杂度，通常出现在一些极其低效的算法中，如旅行商问题的穷举解法。