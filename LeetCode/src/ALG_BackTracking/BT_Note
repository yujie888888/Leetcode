** BackTracking **
    回溯是一种通过试错的方法来解决问题的算法，纯暴力搜索方法，尤其是在搜索问题中寻找所有（或部分）解的场景，
    当它通过尝试可能的完成路径发现现有的部分解不可行时，它会撤销上一步甚至是几步的计算，再通过其他可能的分支继续尝试。
    回溯和递归最大的区别就是回溯是在递归操作之后，回溯会撤销上一步操作
    回溯法很难，很不好理解，而且回溯法并不是什么高效的算法。(md没一点好处)
* case *
        回溯法，一般可以解决如下几种问题：
            1.组合问题：N个数里面按一定规则找出k个数的集合
            2.切割问题：一个字符串按一定规则有几种切割方式
            3.子集问题：一个N个数的集合里有多少符合条件的子集
            4.排列问题：N个数按一定规则全排列，有几种排列方式
            5.棋盘问题：N皇后，解数独等等
* Steps *
        1.!!最重要的是要会画树!!
              回溯法解决的问题都可以抽象为树形结构，做题前先画一个树结构
              集合的大小就构成了树的宽度，递归的深度就构成了树的深度。
        2.返回值以及参数
            回溯算法中函数返回值一般为void。
            回溯算法需要的参数不像二叉树递归的时候那么容易一次性确定下来，所以一般是先写逻辑，然后需要什么参数，就填什么参数。
        3.回溯函数终止条件
            if (终止条件) {
                存放结果;
                return;
            }
        4.回溯搜索的遍历过程
            for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {
                处理节点;
                backtracking(路径，选择列表); // 递归
                回溯，撤销处理结果
            }
        5.总结
            void backtracking(参数) {
                if (终止条件) {
                    存放结果;
                    return;
                }
                for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {
                    处理节点;
                    backtracking(路径，选择列表); // 递归
                    回溯，撤销处理结果
                }
            }

##分类总结##
    #组合问题#
        P77,P78,P216  -> *1
        P39,P1415     -> *2
        P40,P90       -> *3
        P377          -> *4
        P17           -> *5

    #分类
        *1. unique resL; nums中的元素是distinct的，nums中的每个元素只用一次 (P77, P78, P216)
                for(i=start, ,) & bk(i+1)  =>  only use once for every element
                                           =>  resL is unique

        *2. resL必须是unique的; nums[]的元素是distinct的，可以重复使用;（P39）
                for(i=start, ,)  =>  resL is unique
                    i is not from 0, is from i, means can only select the elements that behind nums[i](included)
                    举个例子就可以看明白，如果[3,6,2,7]中，选3的这一层有答案[3,2,2], 选2的这一层没有答案，这样就排除了[2,2,3]这个重复的答案
                bk(,i), pass in start = i  =>  can select duplicate same element

        *3.resL必须是unique的; nums中会有重复元素，每个元素只能用一次;（P40, P90）
            for(i=start, ,) & bk(i+1)  =>  only use once for every element
            if(nums[i] == nums[i-1]) continue  =>  remove duplicate resL (because of the duplicate emelents)
                                               =>  resL is unique



       *4. Non-unique resL；nums中的元素是distinct的，nums中的元素可重复使用（P377）
            377用BT会超时，但是作为一个例子说下无妨
            几乎没有任何限制，所以就是最简单的bk模板，不用传递start，不用check nums[i]和nums[i-1]

       *5. unique resL; 不同集合中选择元素 (P17)

    #分割问题#
        P131
        P93
    #Subsets#
        P78
        P90
    #Subsequences#
        P491

** Time Complexity **
    !!最重要的是要会画树!!
    递归树的宽度^递归树的深度 * 单层语句的时间复杂度(在每个结点进行的操作的时间复杂度)
    或者说 树的结点数量 * 单层语句的时间复杂度(在每个结点进行的操作的时间复杂度)
** Space Complexity **
    递归栈深度 + 结果存储空间
        在递归过程中，每一层递归都会在调用栈上占用一定的空间。这通常包括函数参数、局部变量和返回地址。
##题型Topic##
    1.Combinations
      1.单层递归中遍历每一层可以的选择
      2.用BackTracking递归每一层(剪枝操作一般在这)
      3.终止条件处进行结果处理